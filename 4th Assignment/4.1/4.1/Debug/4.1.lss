
AVRASM ver. 2.2.7  C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\4η Εργαστηριακή ’σκηση\’σκηση 1\4.1\4.1\main.asm Sat Jan 15 18:34:36 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\4η Εργαστηριακή ’σκηση\’σκηση 1\4.1\4.1\main.asm(7): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\4η Εργαστηριακή ’σκηση\’σκηση 1\4.1\4.1\main.asm(7): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 #define _M16DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16
                                 #pragma AVRPART ADMIN PART_NAME ATmega16
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 ; 4.1.asm
                                 ;
                                 ; Created: 2/12/2021 6:50:04 ΞΌΞΌ
                                 ; Author : Ξ Ξ΅Ξ³Ξ΅ΞΉΟΟΞ· ΞΞ¬ΟΞ±Ξ»Ξ·
                                 ;
                                 .include "m16def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 .DSEG
000060                           _tmp_: .byte 2
                                 .CSEG
                                 
                                 .org 0x0 
000000 940c 001d                 jmp reset 
                                 .org 0x10 
000010 c066                      rjmp ISR_TIMER1_OVF 
                                 .org 0x1c 
00001c c063                      rjmp ADC_ISR
                                 
00001d e58f                      reset:	ldi r24, low(RAMEND)				; initialize stack pointer
00001e bf8d                      		out SPL, r24
00001f e084                      		ldi r24, high(RAMEND)
000020 bf8e                      		out SPH, r24
                                 
000021 2788                      		clr r24
000022 d144                      		rcall lcd_init_sim					; initialize with clear screen
000023 940e 00e9                 		call ADC_init						; initialize ADC
                                 		
000025 e0e0                      		ldi r30, 0							; initialize with flag = 0
000026 e0f0                      		ldi r31, 0							; flag to make leds blink in Gas detected state
                                 
000027 ef8f                      		ser r24								
000028 bb87                      		out DDRB, r24						; initialize PORTB for output
000029 bb81                      		out DDRD, r24						; initialize PORTD that is connected to LCD, as output
00002a ef80                      		ldi r24, (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)	; set as output the 4 MSB
00002b bb84                      		out DDRC, r24												; of PORTC
                                 
00002c e084                      		ldi r24, (1 << TOIE1)		; activate overfloat interrupt of TCNT1
00002d bf89                      		out TIMSK, r24				; timer1
00002e e085                      		ldi r24, (1 << CS12) | (0<<CS11) | (1<<CS10)	; CK/1024
00002f bd8e                      		out TCCR1B, r24
                                 
000030 d136                      init:	rcall lcd_init_sim
                                 		; fcount = 8MHz/1024=7812.5Hz
                                 		; timer: 100ms=0.1sec
                                 		; cc_count = 0.1*7812.5=781.25cc
                                 		; START = 65536-781.25=64754.75 ~ 64755 = 0xFCF3
000031 ef8c                      		ldi r24,0xFC	;initialize TCNT1
000032 bd8d                      		out TCNT1H, r24
000033 ef83                      		ldi r24, 0xF3
000034 bd8c                      		out TCNT1L, r24
000035 9478                      		sei	; activate interrupts
                                 
000036 d0da                      main:	rcall scan_keypad_rising_edge_sim
000037 d0f7                      		rcall keypad_to_ascii_sim			; read 1st digit 
000038 3080                      		cpi r24, 0							; repeat until 1st digit is valid
000039 f3e1                      		breq main
00003a 2f48                      		mov r20,r24							; store 1st digit in r20
00003b d0d5                      next:	rcall scan_keypad_rising_edge_sim
00003c d0f2                      		rcall keypad_to_ascii_sim			; read 2nd digit 
00003d 3080                      		cpi r24, 0							; repeat until 2nd digit is valid
00003e f3e1                      		breq next
00003f 2f58                      		mov r21,r24							; store 2nd digit in r21
000040 d0d0                      		rcall scan_keypad_rising_edge_sim	; we call that for safety reasons
                                 
000041 3344                      		cpi r20, 52		; if 1st digit != 4
000042 f511                      		brne wrong_key
000043 3351                      		cpi r21, 49		; or 2nd digit != 1
000044 f501                      		brne wrong_key	; wrong_key given, go to wrong_key
                                 
000045 94f8                      correct_key:	cli		; disable interupts
000046 e0e0                      				ldi r30, 0		; flag = 0
000047 2788                      				clr r24
000048 d11e                      				rcall lcd_init_sim
000049 e587                      				ldi r24, 'W'
00004a d163                      				rcall lcd_data_sim
00004b e485                      				ldi r24, 'E'
00004c d161                      				rcall lcd_data_sim
00004d e48c                      				ldi r24, 'L'
00004e d15f                      				rcall lcd_data_sim
00004f e483                      				ldi r24, 'C'
000050 d15d                      				rcall lcd_data_sim
000051 e48f                      				ldi r24, 'O'
000052 d15b                      				rcall lcd_data_sim
000053 e48d                      				ldi r24, 'M'
000054 d159                      				rcall lcd_data_sim
000055 e485                      				ldi r24, 'E'
000056 d157                      				rcall lcd_data_sim
000057 e280                      				ldi r24, ' '
000058 d155                      				rcall lcd_data_sim
000059 e384                      				ldi r24, '4'
00005a d153                      				rcall lcd_data_sim
00005b e381                      				ldi r24, '1'
00005c d151                      				rcall lcd_data_sim	;display "WELCOME 41"
                                 
00005d e830                      				ldi r19, (1 << PB7)
00005e bb38                      				out PORTB, r19		; turn on PB7
00005f ea80                      				ldi r24, low(4000)
000060 e09f                      				ldi r25, high(4000)
000061 d174                      				rcall wait_msec		; delay 4sec
000062 e030                      				ldi r19, (0 << PB7)
000063 bb38                      				out PORTB, r19		; turn off PB7
000064 cfcb                      				rjmp init			; return to activate overfloat interrupt of TCNT1
                                 
000065 e024                      wrong_key:	ldi r18, 4			; loop for 4 times
000066 3020                      loop:		cpi r18, 0
000067 f071                      			breq finish
000068 b336                      			in r19, PINB
000069 6830                      			ori r19, 128		
00006a bb38                      			out PORTB, r19		; turn on PB7 
00006b ef84                      			ldi r24, low(500)
00006c e091                      			ldi r25, high(500)
00006d d168                      			rcall wait_msec		; delay 0.5sec
00006e b336                      			in r19, PINB
00006f 773f                      			andi r19, 127
000070 bb38                      			out PORTB, r19		; turn off PB7
000071 ef84                      			ldi r24, low(500)
000072 e091                      			ldi r25, high(500)
000073 d162                      			rcall wait_msec		; delay 0.5sec
000074 952a                      			dec r18
000075 cff0                      			rjmp loop
                                 
000076 cfbf                      finish:	rjmp main			; return to main
                                 
                                 ; interupt service routine of timer1
000077 94f8                      ISR_TIMER1_OVF: cli 
000078 ec8f                      				ldi r24,(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADSC) ; start transformation now	
000079 b986                      				out ADCSRA,r24
00007a ef8c                      				ldi r24,0xFC ;initialize TCNT1 
00007b bd8d                      				out TCNT1H, r24 
00007c ef83                      				ldi r24, 0xF3 
00007d bd8c                      				out TCNT1L, r24 
00007e 9478                      				sei
00007f 9518                      				reti
                                 
                                 ; interupt service routine (read CO level and acts accordingly)
000080 b1c4                      ADC_ISR:	in r28, ADCL
000081 b1d5                      			in r29, ADCH	; read ADC
000082 30d0                      			cpi r29, 0
000083 f031                      			breq ZERO
000084 30d1                      			cpi r29, 1
000085 f041                      			breq ONE
000086 30d2                      			cpi r29, 2
000087 f061                      			breq TWO
000088 30d3                      			cpi r29, 3
000089 f061                      			breq THREE
00008a 37c2                      		ZERO:	cpi r28, 0x72	
00008b f060                      				brlo led_PB0	; ADC <= 114 => Cx <= 35
00008c 3ccf                      				cpi r28, 0xcf
00008d f068                      				brlo led_PB1	; 114 < ADC <= 207 => 35 < Cx <= 70
00008e 32cc                      		ONE:	cpi r28, 0x2c	
00008f f070                      				brlo led_PB2	; 207 < ADC <= 300 => 70 < Cx <= 105
000090 38ca                      				cpi r28, 0x8a
000091 f070                      				brlo led_PB3	; 300 < ADC <= 394 => 105 < Cx <= 140
000092 3ec7                      				cpi r28, 0xe7
000093 f070                      				brlo led_PB4	; 394 < ADC <= 487 => 140 < Cx <= 175
000094 34c4                      		TWO:	cpi r28, 0x44
000095 f070                      				brlo led_PB5	; 487 < ADC <= 580 => 175 < Cx <= 210
000096 3fcf                      		THREE:	cpi r28, 0xff
000097 f070                      				brlo led_PB6	; 580 < ADC <= 1023 => 210 < Cx <= 1023
                                 
000098 e011                      	led_PB0:	ldi r17, 0b00000001
000099 bb18                      				out PORTB, r17	; turn on PB0
00009a c015                      				rjmp CLEAR
00009b e013                      	led_PB1:	ldi r17, 0b00000011
00009c bb18                      				out PORTB, r17	; turn on PB0 - PB1
00009d c012                      				rjmp CLEAR
00009e e017                      	led_PB2:	ldi r17, 0b00000111
00009f c008                      				rjmp Gas_on_led
0000a0 e01f                      	led_PB3:	ldi r17, 0b00001111
0000a1 c006                      				rjmp Gas_on_led
0000a2 e11f                      	led_PB4:	ldi r17, 0b00011111
0000a3 c004                      				rjmp Gas_on_led
0000a4 e31f                      	led_PB5:	ldi r17, 0b00111111
0000a5 c002                      				rjmp Gas_on_led
0000a6 e71f                      	led_PB6:	ldi r17, 0b01111111
0000a7 c000                      				rjmp Gas_on_led
                                 
0000a8 30f0                      	Gas_on_led: cpi r31,0		; make leds blink 
0000a9 f019                      				breq turn_on	; if in previous Gas detected state leds were on, turn them off 
0000aa e0f0                      				ldi r31,0 
0000ab e010                      				ldi r17,0 
0000ac c001                      				rjmp turn_off 
0000ad e0f1                      	turn_on:	ldi r31,1 
0000ae bb18                      	turn_off:	out PORTB, r17 ; turn on or off PB0 - PB6 
0000af c015                      				rjmp GAS
                                 
0000b0 30e0                      		CLEAR:	cpi r30, 0			; check if the previous state was GAS LEAK 
0000b1 f089                      				breq already_clean
0000b2 e0e0                      				ldi r30, 0
0000b3 2788                      				clr r24
0000b4 d0b2                      				rcall lcd_init_sim
0000b5 e483                      				ldi r24, 'C'
0000b6 d0f7                      				rcall lcd_data_sim
0000b7 e48c                      				ldi r24, 'L'
0000b8 d0f5                      				rcall lcd_data_sim
0000b9 e485                      				ldi r24, 'E'
0000ba d0f3                      				rcall lcd_data_sim
0000bb e481                      				ldi r24, 'A'
0000bc d0f1                      				rcall lcd_data_sim
0000bd e582                      				ldi r24, 'R'
0000be d0ef                      				rcall lcd_data_sim	;display "CLEAR"
0000bf ec88                      				ldi r24, low(200) 
0000c0 e090                      				ldi r25, high(200) 
0000c1 d114                      				rcall wait_msec ; delay 0.2sec 
0000c2 c020                      				rjmp fin 
0000c3 d0a3                      already_clean:	rcall lcd_init_sim 
0000c4 c01e                      				rjmp fin
                                 		
                                 
0000c5 30e1                      		GAS:	cpi r30, 1		; if previous state was Gas detected then do nothing
0000c6 f0e1                      				breq fin
0000c7 e0e1                      				ldi r30, 1		; set flag = 1 if there is a GAS LEAK
0000c8 2788                      				clr r24
0000c9 d09d                      				rcall lcd_init_sim
0000ca e487                      				ldi r24, 'G'
0000cb d0e2                      				rcall lcd_data_sim
0000cc e481                      				ldi r24, 'A'
0000cd d0e0                      				rcall lcd_data_sim
0000ce e583                      				ldi r24, 'S'
0000cf d0de                      				rcall lcd_data_sim
0000d0 e280                      				ldi r24, ' '
0000d1 d0dc                      				rcall lcd_data_sim
0000d2 e484                      				ldi r24, 'D'
0000d3 d0da                      				rcall lcd_data_sim	
0000d4 e485                      				ldi r24, 'E'
0000d5 d0d8                      				rcall lcd_data_sim
0000d6 e584                      				ldi r24, 'T'
0000d7 d0d6                      				rcall lcd_data_sim
0000d8 e485                      				ldi r24, 'E'
0000d9 d0d4                      				rcall lcd_data_sim
0000da e483                      				ldi r24, 'C'
0000db d0d2                      				rcall lcd_data_sim
0000dc e584                      				ldi r24, 'T'
0000dd d0d0                      				rcall lcd_data_sim
0000de e485                      				ldi r24, 'E'
0000df d0ce                      				rcall lcd_data_sim
0000e0 e484                      				ldi r24, 'D'
0000e1 d0cc                      				rcall lcd_data_sim	;display "GAS DETECTED"
0000e2 c000                      				rjmp fin
                                 
0000e3 ef8c                      	fin:		ldi r24,0xFC	;initialize TCNT1
0000e4 bd8d                      				out TCNT1H, r24
0000e5 ef83                      				ldi r24, 0xF3
0000e6 bd8c                      				out TCNT1L, r24
0000e7 9478                      				sei
0000e8 9518                      				reti
                                 
                                 
                                 ; Routine: usart_init
                                 ; Description:
                                 ; This routine initializes the
                                 ; ADC as shown below.
                                 ; ------- INITIALIZATIONS -------
                                 ;
                                 ; Vref: Vcc (5V for easyAVR6)
                                 ; Selected pin is A0
                                 ; ADC Interrupts are Enabled
                                 ; Prescaler is set as CK/128 = 62.5kHz
                                 ; --------------------------------
                                 ; parameters: None.
                                 ; return value: None.
                                 ; registers affected: r24
                                 ; routines called: None
0000e9 e480                      ADC_init:	ldi r24,(1<<REFS0) ; Vref: Vcc
0000ea b987                      			out ADMUX,r24 ;MUX4:0 = 00000 for A0.
                                 			;ADC is Enabled (ADEN=1)
                                 			;ADC Interrupts are Enabled (ADIE=1)
                                 			;Set Prescaler CK/128 = 62.5Khz (ADPS2:0=111)
0000eb e88f                      			ldi r24,(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)
0000ec b986                      			out ADCSRA,r24
0000ed 9508                      			ret
                                 
                                 
                                 //given code for functions to be called
                                 scan_row_sim:	
0000ee bb95                      	out PORTC, r25		; ? ?????????? ?????? ??????? ??? ?????? Ξ²β¬Β1Ξ²β¬β’
0000ef 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
0000f0 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
0000f1 ef84                      	ldi r24,low(500)	; ?????????
0000f2 e091                      	ldi r25,high(500)
0000f3 d0ec                      	rcall wait_usec
0000f4 919f                      	pop r25
0000f5 918f                      	pop r24				; ????? ????? ??????
0000f6 0000                      	nop
0000f7 0000                      	nop					; ??????????? ??? ?? ???????? ?? ????? ? ?????? ??????????
0000f8 b383                      	in r24, PINC		; ??????????? ?? ?????? (??????) ??? ????????? ??? ????? ?????????
0000f9 708f                      	andi r24 ,0x0f		; ????????????? ?? 4 LSB ???? ?? Ξ²β¬Β1Ξ²β¬β’ ???????? ??? ????? ?????????
0000fa 9508                      	ret					; ?? ?????????
                                 
                                 
                                 scan_keypad_sim:	
0000fb 93af                      	push r26			; ?????????? ???? ??????????? r27:r26 ????? ????
0000fc 93bf                      	push r27			; ????????? ???? ???? ???????
0000fd e190                      	ldi r25 , 0x10		; ?????? ??? ????? ?????? ??? ????????????? (PC4: 1 2 3 A)
0000fe dfef                      	rcall scan_row_sim
0000ff 9582                      	swap r24			; ?????????? ?? ??????????
000100 2fb8                      	mov r27, r24		; ??? 4 msb ??? r27
000101 e290                      	ldi r25 ,0x20		; ?????? ?? ??????? ?????? ??? ????????????? (PC5: 4 5 6 B)
000102 dfeb                      	rcall scan_row_sim
000103 0fb8                      	add r27, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r27
000104 e490                      	ldi r25 , 0x40		; ?????? ??? ????? ?????? ??? ????????????? (PC6: 7 8 9 C)
000105 dfe8                      	rcall scan_row_sim
000106 9582                      	swap r24			; ?????????? ?? ??????????
000107 2fa8                      	mov r26, r24		; ??? 4 msb ??? r26
000108 e890                      	ldi r25 ,0x80		; ?????? ??? ??????? ?????? ??? ????????????? (PC7: * 0 # D)
000109 dfe4                      	rcall scan_row_sim
00010a 0fa8                      	add r26, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r26
00010b 01cd                      	movw r24, r26		; ???????? ?? ?????????? ????? ??????????? r25:r24
00010c 27aa                      	clr r26				; ?????????? ??? ??? ????????????? ????????
00010d bba5                      	out PORTC,r26		; ?????????? ??? ??? ????????????? ????????
00010e 91bf                      	pop r27				; ????????? ???? ??????????? r27:r26
00010f 91af                      	pop r26
000110 9508                      	ret 
                                 
                                 
                                 scan_keypad_rising_edge_sim:
000111 936f                      	push r22				; ?????????? ???? ??????????? r23:r22 ??? ????
000112 937f                      	push r23				; r26:r27 ????? ???? ????????? ???? ???? ???????
000113 93af                      	push r26
000114 93bf                      	push r27	
000115 dfe5                      	rcall scan_keypad_sim	; ?????? ?? ???????????? ??? ?????????? ?????????
000116 938f                      	push r24				; ??? ?????????? ?? ??????????
000117 939f                      	push r25
000118 e08f                      	ldi r24 ,15				; ??????????? 15 ms (??????? ????? 10-20 msec ??? ??????????? ??? ???
000119 e090                      	ldi r25 ,0				; ???????????? ??? ????????????? Ξ²β¬β ????????????? ????????????)
00011a d0bb                      	rcall wait_msec
00011b dfdf                      	rcall scan_keypad_sim	; ?????? ?? ???????????? ???? ??? ????????	
00011c 917f                      	pop r23					; ??? ??????? ?????????? ???????????
00011d 916f                      	pop r22
00011e 2386                      	and r24 ,r22
00011f 2397                      	and r25 ,r23
000120 e6a0                      	ldi r26 ,low(_tmp_)		; ??????? ??? ????????? ??? ????????? ????
000121 e0b0                      	ldi r27 ,high(_tmp_)	; ??????????? ????? ??? ???????? ????? r27:r26
000122 917d                      	ld r23 ,X+
000123 916c                      	ld r22 ,X	
000124 938c                      	st X ,r24				; ?????????? ??? RAM ?? ??? ?????????
000125 939e                      	st -X ,r25				; ??? ?????????
000126 9570                      	com r23
000127 9560                      	com r22					; ???? ???? ????????? ??? ????? ΞΒ«?????ΞΒ» ???????
000128 2386                      	and r24 ,r22
000129 2397                      	and r25 ,r23
00012a 91bf                      	pop r27					; ????????? ???? ??????????? r27:r26
00012b 91af                      	pop r26					; ??? r23:r22
00012c 917f                      	pop r23
00012d 916f                      	pop r22
00012e 9508                      	ret
                                 
                                 
                                 keypad_to_ascii_sim:
00012f 93af                      	push r26			; ?????????? ???? ??????????? r27:r26 ????? ????
000130 93bf                      	push r27			; ????????? ???? ??? ???????
000131 01dc                      	movw r26 ,r24		; ?????? Ξ²β¬Β1Ξ²β¬β’ ???? ?????? ??? ?????????? r26 ????????
                                 						; ?? ???????? ??????? ??? ????????
000132 e28a                      	ldi r24 ,'*'		
                                 						; r26
                                 						;C 9 8 7 D # 0 *
000133 fda0                      	sbrc r26 ,0
000134 c02f                      	rjmp return_ascii
000135 e380                      	ldi r24 ,'0'
000136 fda1                      	sbrc r26 ,1
000137 c02c                      	rjmp return_ascii
000138 e283                      	ldi r24 ,'#'
000139 fda2                      	sbrc r26 ,2
00013a c029                      	rjmp return_ascii
00013b e484                      	ldi r24 ,'D'
00013c fda3                      	sbrc r26 ,3			; ?? ??? ????? Ξ²β¬Β1Ξ²β¬β’??????????? ??? ret, ?????? (?? ????? Ξ²β¬Β1Ξ²β¬β’)	
00013d c026                      	rjmp return_ascii	; ?????????? ?? ??? ?????????? r24 ??? ASCII ???? ??? D.
00013e e387                      	ldi r24 ,'7'
00013f fda4                      	sbrc r26 ,4
000140 c023                      	rjmp return_ascii
000141 e388                      	ldi r24 ,'8'
000142 fda5                      	sbrc r26 ,5
000143 c020                      	rjmp return_ascii
000144 e389                      	ldi r24 ,'9'	
000145 fda6                      	sbrc r26 ,6
000146 c01d                      	rjmp return_ascii ;
000147 e483                      	ldi r24 ,'C'
000148 fda7                      	sbrc r26 ,7
000149 c01a                      	rjmp return_ascii
00014a e384                      	ldi r24 ,'4'		; ?????? Ξ²β¬Β1Ξ²β¬β’ ???? ?????? ??? ?????????? r27 ????????
00014b fdb0                      	sbrc r27 ,0			; ?? ???????? ??????? ??? ????????
00014c c017                      	rjmp return_ascii
00014d e385                      	ldi r24 ,'5'
                                 						;r27
                                 						;? 3 2 1 B 6 5 4
00014e fdb1                      	sbrc r27 ,1
00014f c014                      	rjmp return_ascii
000150 e386                      	ldi r24 ,'6'
000151 fdb2                      	sbrc r27 ,2
000152 c011                      	rjmp return_ascii
000153 e482                      	ldi r24 ,'B'
000154 fdb3                      	sbrc r27 ,3
000155 c00e                      	rjmp return_ascii
000156 e381                      	ldi r24 ,'1'
000157 fdb4                      	sbrc r27 ,4
000158 c00b                      	rjmp return_ascii ;
000159 e382                      	ldi r24 ,'2'
00015a fdb5                      	sbrc r27 ,5
00015b c008                      	rjmp return_ascii
00015c e383                      	ldi r24 ,'3' 
00015d fdb6                      	sbrc r27 ,6
00015e c005                      	rjmp return_ascii
00015f e481                      	ldi r24 ,'A'
000160 fdb7                      	sbrc r27 ,7
000161 c002                      	rjmp return_ascii
000162 2788                      	clr r24
000163 c000                      	rjmp return_ascii
                                 	
                                 return_ascii:
000164 91bf                      	pop r27				; ????????? ???? ??????????? r27:r26
000165 91af                      	pop r26
000166 9508                      	ret 
                                 	
                                 
                                 lcd_init_sim:
000167 938f                      	push r24				; ?????????? ???? ??????????? r25:r24 ????? ????
000168 939f                      	push r25				; ????????? ???? ??? ???????
                                 	
000169 e288                      	ldi r24, 40				; ???? ? ???????? ??? lcd ????????????? ??
00016a e090                      	ldi r25, 0				; ????? ??????? ??? ???? ??? ????????????.
00016b d06a                      	rcall wait_msec			; ??????? 40 msec ????? ???? ?? ???????????.
00016c e380                      	ldi r24, 0x30			; ?????? ????????? ?? 8 bit mode
00016d bb82                      	out PORTD, r24			; ?????? ??? ???????? ?? ??????? ???????
00016e 9a93                      	sbi PORTD, PD3			; ??? ?? ?????????? ??????? ??? ???????
00016f 9893                      	cbi PORTD, PD3			; ??? ??????, ? ?????? ???????????? ??? ?????
000170 e287                      	ldi r24, 39
000171 e090                      	ldi r25, 0				; ??? ? ???????? ??? ?????? ????????? ?? 8-bit mode
000172 d06d                      	rcall wait_usec			; ??? ?? ?????? ??????, ???? ?? ? ???????? ???? ??????????
                                 							; ??????? 4 bit ?? ??????? ?? ?????????? 8 bit
000173 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
000174 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
000175 ee88                      	ldi r24,low(1000)		; ?????????
000176 e093                      	ldi r25,high(1000)
000177 d068                      	rcall wait_usec
000178 919f                      	pop r25
000179 918f                      	pop r24					; ????? ????? ??????
00017a e380                      	ldi r24, 0x30
00017b bb82                      	out PORTD, r24
00017c 9a93                      	sbi PORTD, PD3
00017d 9893                      	cbi PORTD, PD3
00017e e287                      	ldi r24,39
00017f e090                      	ldi r25,0
000180 d05f                      	rcall wait_usec 
000181 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
000182 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
000183 ee88                      	ldi r24 ,low(1000)		; ?????????
000184 e093                      	ldi r25 ,high(1000)
000185 d05a                      	rcall wait_usec
000186 919f                      	pop r25
000187 918f                      	pop r24					; ????? ????? ??????
000188 e280                      	ldi r24,0x20			; ?????? ?? 4-bit mode
000189 bb82                      	out PORTD, r24
00018a 9a93                      	sbi PORTD, PD3
00018b 9893                      	cbi PORTD, PD3
00018c e287                      	ldi r24,39
00018d e090                      	ldi r25,0
00018e d051                      	rcall wait_usec
00018f 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
000190 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
000191 ee88                      	ldi r24 ,low(1000)		; ?????????
000192 e093                      	ldi r25 ,high(1000)	
000193 d04c                      	rcall wait_usec
000194 919f                      	pop r25
000195 918f                      	pop r24					; ????? ????? ??????
000196 e288                      	ldi r24,0x28			; ??????? ?????????? ???????? 5x8 ????????
000197 d00c                      	rcall lcd_command_sim	; ??? ???????? ??? ??????? ???? ?????
000198 e08c                      	ldi r24,0x0c			; ???????????? ??? ??????, ???????? ??? ???????
000199 d00a                      	rcall lcd_command_sim
00019a e081                      	ldi r24,0x01			; ?????????? ??? ??????
00019b d008                      	rcall lcd_command_sim
00019c ef8a                      	ldi r24, low(1530)
00019d e095                      	ldi r25, high(1530)
00019e d041                      	rcall wait_usec
00019f e086                      	ldi r24 ,0x06			; ???????????? ????????? ??????? ???? 1 ??? ??????????
0001a0 d003                      	rcall lcd_command_sim	; ??? ????? ???????????? ???? ??????? ??????????? ???
                                 							; ?????????????? ??? ????????? ????????? ??? ??????
0001a1 919f                      	pop r25					; ????????? ???? ??????????? r25:r24
0001a2 918f                      	pop r24
0001a3 9508                      	ret
                                 	
                                 
                                 lcd_command_sim:
0001a4 938f                      	push r24					; ?????????? ???? ??????????? r25:r24 ????? ????
0001a5 939f                      	push r25					; ????????? ???? ??? ???????
0001a6 9892                      	cbi PORTD, PD2				; ??????? ??? ?????????? ??????? (PD2=0)
0001a7 d010                      	rcall write_2_nibbles_sim	; ???????? ??? ??????? ??? ??????? 39?sec
0001a8 e287                      	ldi r24, 39					; ??? ??? ?????????? ??? ????????? ??? ??? ??? ??????? ??? lcd.
0001a9 e090                      	ldi r25, 0					; ???.: ???????? ??? ???????, ?? clear display ??? return home,
0001aa d035                      	rcall wait_usec				; ??? ???????? ????????? ?????????? ??????? ????????.	
0001ab 919f                      	pop r25						; ????????? ???? ??????????? r25:r24
0001ac 918f                      	pop r24
0001ad 9508                      	ret 
                                 	
                                 
                                 lcd_data_sim:
0001ae 938f                      	push r24					; ?????????? ???? ??????????? r25:r24 ????? ????
0001af 939f                      	push r25					; ????????? ???? ??? ???????
0001b0 9a92                      	sbi PORTD, PD2				; ??????? ??? ?????????? ????????? (PD2=1)
0001b1 d006                      	rcall write_2_nibbles_sim	; ???????? ??? byte
0001b2 e28b                      	ldi r24 ,43					; ??????? 43?sec ????? ?? ??????????? ? ????
0001b3 e090                      	ldi r25 ,0					; ??? ????????? ??? ??? ??????? ??? lcd
0001b4 d02b                      	rcall wait_usec
0001b5 919f                      	pop r25						;????????? ???? ??????????? r25:r24
0001b6 918f                      	pop r24
0001b7 9508                      	ret
                                 	
                                 
                                 write_2_nibbles_sim:
0001b8 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
0001b9 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
0001ba e780                      	ldi r24 ,low(6000)	; ?????????
0001bb e197                      	ldi r25 ,high(6000)
0001bc d023                      	rcall wait_usec
0001bd 919f                      	pop r25
0001be 918f                      	pop r24				; ????? ????? ??????
0001bf 938f                      	push r24			; ??????? ?? 4 MSB
0001c0 b390                      	in r25, PIND		; ??????????? ?? 4 LSB ??? ?? ?????????????	
0001c1 709f                      	andi r25, 0x0f		; ??? ?? ??? ????????? ??? ????? ??????????? ?????????
0001c2 7f80                      	andi r24, 0xf0		; ????????????? ?? 4 MSB ???
0001c3 0f89                      	add r24, r25		; ???????????? ?? ?? ???????????? 4 LSB
0001c4 bb82                      	out PORTD, r24		; ??? ???????? ???? ?????
0001c5 9a93                      	sbi PORTD, PD3		; ????????????? ?????? Enable ???? ????????? PD3
0001c6 9893                      	cbi PORTD, PD3		; PD3=1 ??? ???? PD3=0
0001c7 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
0001c8 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
0001c9 e780                      	ldi r24 ,low(6000)	; ?????????
0001ca e197                      	ldi r25 ,high(6000)
0001cb d014                      	rcall wait_usec
0001cc 919f                      	pop r25
0001cd 918f                      	pop r24				; ????? ????? ??????
0001ce 918f                      	pop r24				; ??????? ?? 4 LSB. ????????? ?? byte.
0001cf 9582                      	swap r24			; ????????????? ?? 4 MSB ?? ?? 4 LSB
0001d0 7f80                      	andi r24 ,0xf0		; ??? ?? ??? ????? ???? ?????????????
0001d1 0f89                      	add r24, r25
0001d2 bb82                      	out PORTD, r24
0001d3 9a93                      	sbi PORTD, PD3		; ???? ?????? Enable
0001d4 9893                      	cbi PORTD, PD3
0001d5 9508                      	ret
                                 
                                 
                                 wait_msec:
0001d6 938f                      	push r24			; 2 ?????? (0.250 ?sec)
0001d7 939f                      	push r25			; 2 ??????
0001d8 ee86                      	ldi r24 , low(998)	; ??????? ??? ?????. r25:r24 ?? 998 (1 ?????? - 0.125 ?sec)
0001d9 e093                      	ldi r25 , high(998) ; 1 ?????? (0.125 ?sec)
0001da d005                      	rcall wait_usec		; 3 ?????? (0.375 ?sec), ???????? ???????? ??????????? 998.375 ?sec
0001db 919f                      	pop r25				; 2 ?????? (0.250 ?sec)
0001dc 918f                      	pop r24				; 2 ??????
0001dd 9701                      	sbiw r24 , 1		; 2 ??????
0001de f7b9                      	brne wait_msec		; 1 ? 2 ?????? (0.125 ? 0.250 ?sec)
0001df 9508                      	ret					; 4 ?????? (0.500 ?sec)
                                 
                                 wait_usec:
0001e0 9701                      	sbiw r24 ,1		; 2 ?????? (0.250 ?sec)
0001e1 0000                      	nop				; 1 ?????? (0.125 ?sec)
0001e2 0000                      	nop				; 1 ?????? (0.125 ?sec)
0001e3 0000                      	nop				; 1 ?????? (0.125 ?sec)
0001e4 0000                      	nop				; 1 ?????? (0.125 ?sec)
0001e5 f7d1                      	brne wait_usec	; 1 ? 2 ?????? (0.125 ? 0.250 ?sec)


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
x  :   4 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   0 r17:  11 r18:   3 r19:  10 r20:   2 
r21:   2 r22:   7 r23:   7 r24: 157 r25:  52 r26:  21 r27:  17 r28:   8 
r29:   5 r30:   6 r31:   4 
Registers used: 16 out of 35 (45.7%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   4 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :   6 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :  19 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 inc   :   0 jmp   :   1 
ld    :   2 ldd   :   0 ldi   : 126 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   4 movw  :   2 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   0 ori   :   1 out   :  30 pop   :  31 
push  :  31 rcall :  69 ret   :  11 reti  :   2 rjmp  :  34 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :  16 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   3 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003ce    924      0    924   16384   5.6%
[.dseg] 0x000060 0x000062      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
