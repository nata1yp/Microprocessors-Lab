
2.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000643  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000597  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000346  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include <avr/interrupt.h>

unsigned char a,b,temp,count,output;	//a->PORTA, b->PORTB

ISR (INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
	int i;
	int output;
	output=0x00;
	a=PINA & 0x04;	//isolate the 2nd lsb for PA2
  92:	59 b3       	in	r21, 0x19	; 25
	a=a>>2;	//shift right 2 positions to get the value in the LSB
  94:	52 fb       	bst	r21, 2
  96:	55 27       	eor	r21, r21
  98:	50 f9       	bld	r21, 0
  9a:	50 93 64 00 	sts	0x0064, r21	; 0x800064 <a>
	b=PINB;
  9e:	86 b3       	in	r24, 0x16	; 22
  a0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <count>
  a4:	28 e0       	ldi	r18, 0x08	; 8
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <__vector_1+0x30>
		if(b==1)
		{
			count++;	//counter for dip switches ON
		}
		b=temp;		//restore number
		b=b>>1;		//right shift to check the next LSB dip switch
  aa:	84 2f       	mov	r24, r20
	b=PINB;
	for(i=0; i<8; i++)
	{
		temp=b;
		b=b & 0x01;	//isolate the lsb
		if(b==1)
  ac:	80 fd       	sbrc	r24, 0
		{
			count++;	//counter for dip switches ON
  ae:	9f 5f       	subi	r25, 0xFF	; 255
		}
		b=temp;		//restore number
		b=b>>1;		//right shift to check the next LSB dip switch
  b0:	48 2f       	mov	r20, r24
  b2:	46 95       	lsr	r20
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
	int output;
	output=0x00;
	a=PINA & 0x04;	//isolate the 2nd lsb for PA2
	a=a>>2;	//shift right 2 positions to get the value in the LSB
	b=PINB;
	for(i=0; i<8; i++)
  b8:	c1 f7       	brne	.-16     	; 0xaa <__vector_1+0x2e>
  ba:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <count>
  be:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <temp>
			count++;	//counter for dip switches ON
		}
		b=temp;		//restore number
		b=b>>1;		//right shift to check the next LSB dip switch
	}
	if(a==0)
  c6:	51 11       	cpse	r21, r1
  c8:	13 c0       	rjmp	.+38     	; 0xf0 <__vector_1+0x74>
	{
		while(count > 0)
  ca:	99 23       	and	r25, r25
  cc:	59 f0       	breq	.+22     	; 0xe4 <__vector_1+0x68>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
		{
			output=output+1;
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
			output=output<<1;
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
			count=count-1;
  da:	91 50       	subi	r25, 0x01	; 1
		b=temp;		//restore number
		b=b>>1;		//right shift to check the next LSB dip switch
	}
	if(a==0)
	{
		while(count > 0)
  dc:	d1 f7       	brne	.-12     	; 0xd2 <__vector_1+0x56>
  de:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count>
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__vector_1+0x6c>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
		{
			output=output+1;
			output=output<<1;
			count=count-1;
		}
		PORTC=output>>1;
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	25 bb       	out	0x15, r18	; 21
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__vector_1+0x76>
	}
	else
	{
		PORTC=count;
  f0:	95 bb       	out	0x15, r25	; 21
	}
	return;
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	5f 91       	pop	r21
  f8:	4f 91       	pop	r20
  fa:	3f 91       	pop	r19
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:

int main(void)
{
	DDRA=0x00;	//set A and B as inputs
 108:	1a ba       	out	0x1a, r1	; 26
	DDRB=0x00;
 10a:	17 ba       	out	0x17, r1	; 23
	DDRC=0xFF;	//set PORTC as output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 bb       	out	0x14, r24	; 20
	GICR=0x40;	//INT0 ON
 110:	80 e4       	ldi	r24, 0x40	; 64
 112:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0x03;	//INT0 MODE: FALL EDGE
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	85 bf       	out	0x35, r24	; 53
	sei();
 118:	78 94       	sei
	while (1)
	{
		asm("nop");
 11a:	00 00       	nop
 11c:	fe cf       	rjmp	.-4      	; 0x11a <main+0x12>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
