
2.1.C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000142  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005df  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021a  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000331  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char f0 , f1 ;

int main ( void )
{
	DDRB = 0xFF; // Initialize PORTB as output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00; // Initialize PORTC as input
  80:	14 ba       	out	0x14, r1	; 20
		// F0
		if ((( PINC & 0x03 )==2) || (( PINC & 0x0e )==12)) {
			f0 = 0;
		}
		else { 
			f0 = 1;
  82:	21 e0       	ldi	r18, 0x01	; 1
	DDRB = 0xFF; // Initialize PORTB as output
	DDRC = 0x00; // Initialize PORTC as input
	
	while (1) {
		// F0
		if ((( PINC & 0x03 )==2) || (( PINC & 0x0e )==12)) {
  84:	83 b3       	in	r24, 0x13	; 19
  86:	83 70       	andi	r24, 0x03	; 3
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	21 f0       	breq	.+8      	; 0x94 <main+0x18>
  8c:	83 b3       	in	r24, 0x13	; 19
  8e:	8e 70       	andi	r24, 0x0E	; 14
  90:	8c 30       	cpi	r24, 0x0C	; 12
  92:	19 f4       	brne	.+6      	; 0x9a <main+0x1e>
			f0 = 0;
  94:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x22>
		}
		else { 
			f0 = 1;
  9a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		// F1
		if ((( PINC & 0x01 )==0) || (( PINC & 0x04 )==0) || (( PINC & 0x0A )==0)) {
  9e:	98 9b       	sbis	0x13, 0	; 19
  a0:	05 c0       	rjmp	.+10     	; 0xac <main+0x30>
  a2:	9a 9b       	sbis	0x13, 2	; 19
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x30>
  a6:	83 b3       	in	r24, 0x13	; 19
  a8:	8a 70       	andi	r24, 0x0A	; 10
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x36>
			f1 = 0;
  ac:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <f1>
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x3a>
		}
		else {
			f1 = 1;
  b2:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <f1>
		}
			
		f1 = f1 << 1;
  b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <f1>
  ba:	88 0f       	add	r24, r24
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <f1>
		PORTB = f0 | f1 ; // Output in PORTB
  c0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	89 2b       	or	r24, r25
  c6:	88 bb       	out	0x18, r24	; 24
	}
  c8:	dd cf       	rjmp	.-70     	; 0x84 <main+0x8>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
