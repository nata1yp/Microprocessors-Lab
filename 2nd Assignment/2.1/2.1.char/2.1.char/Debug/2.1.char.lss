
2.1.char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061f  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054e  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000201  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
int main(void)
{
	char x,A,B,C,D,F0,F1;
	DDRB=0xFF; // use PORTB as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRC=0x00; // use PORTC as input
  70:	14 ba       	out	0x14, r1	; 20
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  72:	61 e0       	ldi	r22, 0x01	; 1
		F1 = ((A && C) && (B || D)); //calculation of F1
  74:	40 e0       	ldi	r20, 0x00	; 0
	DDRB=0xFF; // use PORTB as output
	DDRC=0x00; // use PORTC as input

	while (1)
	{
		x = PINC & 0x0F; //isolation of the 4 LSBs
  76:	83 b3       	in	r24, 0x13	; 19
		A = x & 0x01; //A is PC0
		B = x & 0x02; //B is PC1
		B = B>>1;
  78:	81 fb       	bst	r24, 1
  7a:	99 27       	eor	r25, r25
  7c:	90 f9       	bld	r25, 0
		C = x & 0x04; //C is PC2
		C = C>>2;
  7e:	82 fb       	bst	r24, 2
  80:	22 27       	eor	r18, r18
  82:	20 f9       	bld	r18, 0
		D = x & 0x08; //D is PC3
		D = D>>3;
  84:	83 fb       	bst	r24, 3
  86:	33 27       	eor	r19, r19
  88:	30 f9       	bld	r19, 0
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  8a:	58 2f       	mov	r21, r24
  8c:	51 70       	andi	r21, 0x01	; 1
  8e:	80 fd       	sbrc	r24, 0
  90:	20 c0       	rjmp	.+64     	; 0xd2 <main+0x66>
  92:	99 23       	and	r25, r25
  94:	29 f1       	breq	.+74     	; 0xe0 <main+0x74>
  96:	84 2f       	mov	r24, r20
  98:	08 c0       	rjmp	.+16     	; 0xaa <main+0x3e>
  9a:	33 23       	and	r19, r19
  9c:	e9 f0       	breq	.+58     	; 0xd8 <main+0x6c>
  9e:	29 c0       	rjmp	.+82     	; 0xf2 <main+0x86>
		F1 = ((A && C) && (B || D)); //calculation of F1
  a0:	31 11       	cpse	r19, r1
  a2:	05 c0       	rjmp	.+10     	; 0xae <main+0x42>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  a4:	84 2f       	mov	r24, r20
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x3e>
  a8:	86 2f       	mov	r24, r22
		F1 = ((A && C) && (B || D)); //calculation of F1
  aa:	94 2f       	mov	r25, r20
  ac:	0e c0       	rjmp	.+28     	; 0xca <main+0x5e>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  ae:	84 2f       	mov	r24, r20
		F1 = ((A && C) && (B || D)); //calculation of F1
  b0:	96 2f       	mov	r25, r22
  b2:	0b c0       	rjmp	.+22     	; 0xca <main+0x5e>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  b4:	86 2f       	mov	r24, r22
		F1 = ((A && C) && (B || D)); //calculation of F1
  b6:	94 2f       	mov	r25, r20
  b8:	08 c0       	rjmp	.+16     	; 0xca <main+0x5e>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  ba:	86 2f       	mov	r24, r22
		F1 = ((A && C) && (B || D)); //calculation of F1
  bc:	94 2f       	mov	r25, r20
  be:	05 c0       	rjmp	.+10     	; 0xca <main+0x5e>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  c0:	84 2f       	mov	r24, r20
		F1 = ((A && C) && (B || D)); //calculation of F1
  c2:	96 2f       	mov	r25, r22
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x5e>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  c6:	86 2f       	mov	r24, r22
		F1 = ((A && C) && (B || D)); //calculation of F1
  c8:	96 2f       	mov	r25, r22
		F1 = F1<<1;
		PORTB = (F0 | F1); //output
  ca:	99 0f       	add	r25, r25
  cc:	89 2b       	or	r24, r25
  ce:	88 bb       	out	0x18, r24	; 24
	}
  d0:	d2 cf       	rjmp	.-92     	; 0x76 <main+0xa>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  d2:	91 11       	cpse	r25, r1
  d4:	12 c0       	rjmp	.+36     	; 0xfa <main+0x8e>
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <main+0x7a>
		F1 = ((A && C) && (B || D)); //calculation of F1
  d8:	51 11       	cpse	r21, r1
  da:	ec cf       	rjmp	.-40     	; 0xb4 <main+0x48>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  dc:	86 2f       	mov	r24, r22
  de:	e5 cf       	rjmp	.-54     	; 0xaa <main+0x3e>
  e0:	22 23       	and	r18, r18
  e2:	11 f3       	breq	.-60     	; 0xa8 <main+0x3c>
  e4:	da cf       	rjmp	.-76     	; 0x9a <main+0x2e>
  e6:	21 11       	cpse	r18, r1
  e8:	d8 cf       	rjmp	.-80     	; 0x9a <main+0x2e>
  ea:	e7 cf       	rjmp	.-50     	; 0xba <main+0x4e>
		F1 = ((A && C) && (B || D)); //calculation of F1
  ec:	99 23       	and	r25, r25
  ee:	c1 f2       	breq	.-80     	; 0xa0 <main+0x34>
  f0:	e7 cf       	rjmp	.-50     	; 0xc0 <main+0x54>
  f2:	51 11       	cpse	r21, r1
  f4:	fb cf       	rjmp	.-10     	; 0xec <main+0x80>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  f6:	84 2f       	mov	r24, r20
  f8:	d8 cf       	rjmp	.-80     	; 0xaa <main+0x3e>
		F1 = ((A && C) && (B || D)); //calculation of F1
  fa:	21 11       	cpse	r18, r1
  fc:	e4 cf       	rjmp	.-56     	; 0xc6 <main+0x5a>
		B = B>>1;
		C = x & 0x04; //C is PC2
		C = C>>2;
		D = x & 0x08; //D is PC3
		D = D>>3;
		F0 = !((!A && B ) || (!B && C && D)); //calculation of F0
  fe:	86 2f       	mov	r24, r22
 100:	d4 cf       	rjmp	.-88     	; 0xaa <main+0x3e>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
