
3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093d  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068a  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000405  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000506  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000215b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  74:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_row_sim>:
char first_digit, second_digit;	// digits pressed
char i, x, y;

char scan_row_sim(char y)	// y-->r25
{
	PORTC = y;	// Current line is set to 1
  7c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	87 ee       	ldi	r24, 0xE7	; 231
  80:	93 e0       	ldi	r25, 0x03	; 3
  82:	01 97       	sbiw	r24, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <scan_row_sim+0x6>
  86:	00 c0       	rjmp	.+0      	; 0x88 <scan_row_sim+0xc>
  88:	00 00       	nop
	_delay_us(500);	// delay for ~ 0.5usec (each 'nop' is 1/4usec so it's included to 500usec)
	return PINC & 0x0F;	// keep the 4 LSB of PORTC
  8a:	83 b3       	in	r24, 0x13	; 19
}
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	08 95       	ret

00000090 <scan_keypad_sim>:

int scan_keypad_sim(void)	// x-->r24, y-->r25, z-->r26, h-->r27
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	char z,h;	// set as parameters so as to be topical
	int result;	// result = r25:r24 to be returned
	
	y = 0x10;	// check 1st line
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <y>
	x = scan_row_sim(y);	// keep the result
  9a:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row_sim>
  9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
	h =  x<<4;	// and save it in the 4 MSB of h
  a2:	c8 2f       	mov	r28, r24
  a4:	c2 95       	swap	r28
  a6:	c0 7f       	andi	r28, 0xF0	; 240
	
	y = 0x20;	// check 2nd line
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <y>
	x = scan_row_sim(y);	// keep the result
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row_sim>
  b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
	h = h+x;	// and save it in the 4 LSB of h
  b6:	c8 0f       	add	r28, r24
	
	y = 0x40;	// check 3rd line
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <y>
	x = scan_row_sim(y);	// keep the result
  be:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row_sim>
  c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
	z =  x<<4;	// and save it in the 4 MSB of h
  c6:	d8 2f       	mov	r29, r24
  c8:	d2 95       	swap	r29
  ca:	d0 7f       	andi	r29, 0xF0	; 240
	
	y = 0x80;	// check 4th line
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <y>
	x = scan_row_sim(y);	// keep the result
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row_sim>
  d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
	z = z+x;	// and save it in the 4 LSB of h
	
	result = h;
	return (result<<8) + z;	//return correct number
  da:	2c 2f       	mov	r18, r28
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	32 2f       	mov	r19, r18
  e0:	22 27       	eor	r18, r18
  e2:	8d 0f       	add	r24, r29
}
  e4:	a9 01       	movw	r20, r18
  e6:	48 0f       	add	r20, r24
  e8:	51 1d       	adc	r21, r1
  ea:	ca 01       	movw	r24, r20
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <scan_keypad_rising_edge_sim>:

int scan_keypad_rising_edge_sim(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
	int y = scan_keypad_sim();	// check the keypad for pressed button
  f6:	0e 94 48 00 	call	0x90	; 0x90 <scan_keypad_sim>
  fa:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e2       	ldi	r24, 0x2F	; 47
  fe:	95 e7       	ldi	r25, 0x75	; 117
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <scan_keypad_rising_edge_sim+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <scan_keypad_rising_edge_sim+0x14>
 106:	00 00       	nop
	_delay_ms(15);	// delay for ~ 15msec
	int z = scan_keypad_sim();	// check the keypad again
 108:	0e 94 48 00 	call	0x90	; 0x90 <scan_keypad_sim>
	y = y & z;	// bitwise and, so to have the correct result
 10c:	8c 23       	and	r24, r28
 10e:	9d 23       	and	r25, r29
	z = tmp;	// load from RAM the previous value
 110:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	tmp = y;	// save in RAM the new value
 118:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	z = ~z;	// one's complement
	y = y & z;	// bitwise and
	return y;	// return value
 120:	20 95       	com	r18
 122:	30 95       	com	r19
}
 124:	82 23       	and	r24, r18
 126:	93 23       	and	r25, r19
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <keypad_to_ascii_sim>:

char keypad_to_ascii_sim(int x)	// function that makes the number pressed to the ascii value or 0
{
	switch(x){
 12e:	80 34       	cpi	r24, 0x40	; 64
 130:	91 05       	cpc	r25, r1
 132:	09 f4       	brne	.+2      	; 0x136 <keypad_to_ascii_sim+0x8>
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <keypad_to_ascii_sim+0x96>
 136:	d4 f4       	brge	.+52     	; 0x16c <keypad_to_ascii_sim+0x3e>
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	91 05       	cpc	r25, r1
 13c:	d9 f1       	breq	.+118    	; 0x1b4 <keypad_to_ascii_sim+0x86>
 13e:	64 f4       	brge	.+24     	; 0x158 <keypad_to_ascii_sim+0x2a>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	91 05       	cpc	r25, r1
 144:	09 f4       	brne	.+2      	; 0x148 <keypad_to_ascii_sim+0x1a>
 146:	54 c0       	rjmp	.+168    	; 0x1f0 <keypad_to_ascii_sim+0xc2>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 05       	cpc	r25, r1
 14c:	89 f1       	breq	.+98     	; 0x1b0 <keypad_to_ascii_sim+0x82>
 14e:	81 15       	cp	r24, r1
 150:	90 48       	sbci	r25, 0x80	; 128
 152:	09 f0       	breq	.+2      	; 0x156 <keypad_to_ascii_sim+0x28>
 154:	4b c0       	rjmp	.+150    	; 0x1ec <keypad_to_ascii_sim+0xbe>
 156:	48 c0       	rjmp	.+144    	; 0x1e8 <keypad_to_ascii_sim+0xba>
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	91 05       	cpc	r25, r1
 15c:	79 f1       	breq	.+94     	; 0x1bc <keypad_to_ascii_sim+0x8e>
 15e:	80 32       	cpi	r24, 0x20	; 32
 160:	91 05       	cpc	r25, r1
 162:	71 f1       	breq	.+92     	; 0x1c0 <keypad_to_ascii_sim+0x92>
 164:	08 97       	sbiw	r24, 0x08	; 8
 166:	09 f0       	breq	.+2      	; 0x16a <keypad_to_ascii_sim+0x3c>
 168:	41 c0       	rjmp	.+130    	; 0x1ec <keypad_to_ascii_sim+0xbe>
 16a:	26 c0       	rjmp	.+76     	; 0x1b8 <keypad_to_ascii_sim+0x8a>
 16c:	81 15       	cp	r24, r1
 16e:	24 e0       	ldi	r18, 0x04	; 4
 170:	92 07       	cpc	r25, r18
 172:	81 f1       	breq	.+96     	; 0x1d4 <keypad_to_ascii_sim+0xa6>
 174:	64 f4       	brge	.+24     	; 0x18e <keypad_to_ascii_sim+0x60>
 176:	81 15       	cp	r24, r1
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	92 07       	cpc	r25, r18
 17c:	39 f1       	breq	.+78     	; 0x1cc <keypad_to_ascii_sim+0x9e>
 17e:	81 15       	cp	r24, r1
 180:	22 e0       	ldi	r18, 0x02	; 2
 182:	92 07       	cpc	r25, r18
 184:	29 f1       	breq	.+74     	; 0x1d0 <keypad_to_ascii_sim+0xa2>
 186:	80 38       	cpi	r24, 0x80	; 128
 188:	91 05       	cpc	r25, r1
 18a:	81 f5       	brne	.+96     	; 0x1ec <keypad_to_ascii_sim+0xbe>
 18c:	1d c0       	rjmp	.+58     	; 0x1c8 <keypad_to_ascii_sim+0x9a>
 18e:	81 15       	cp	r24, r1
 190:	20 e1       	ldi	r18, 0x10	; 16
 192:	92 07       	cpc	r25, r18
 194:	19 f1       	breq	.+70     	; 0x1dc <keypad_to_ascii_sim+0xae>
 196:	24 f4       	brge	.+8      	; 0x1a0 <keypad_to_ascii_sim+0x72>
 198:	81 15       	cp	r24, r1
 19a:	98 40       	sbci	r25, 0x08	; 8
 19c:	e9 f0       	breq	.+58     	; 0x1d8 <keypad_to_ascii_sim+0xaa>
 19e:	26 c0       	rjmp	.+76     	; 0x1ec <keypad_to_ascii_sim+0xbe>
 1a0:	81 15       	cp	r24, r1
 1a2:	20 e2       	ldi	r18, 0x20	; 32
 1a4:	92 07       	cpc	r25, r18
 1a6:	e1 f0       	breq	.+56     	; 0x1e0 <keypad_to_ascii_sim+0xb2>
 1a8:	81 15       	cp	r24, r1
 1aa:	90 44       	sbci	r25, 0x40	; 64
 1ac:	d9 f0       	breq	.+54     	; 0x1e4 <keypad_to_ascii_sim+0xb6>
 1ae:	1e c0       	rjmp	.+60     	; 0x1ec <keypad_to_ascii_sim+0xbe>
		case 0x01:return '*';
		case 0x02:return '0';
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	08 95       	ret
		case 0x04:return '#';
 1b4:	83 e2       	ldi	r24, 0x23	; 35
 1b6:	08 95       	ret
		case 0x08:return 'D';
 1b8:	84 e4       	ldi	r24, 0x44	; 68
 1ba:	08 95       	ret
		case 0x10:return '7';
 1bc:	87 e3       	ldi	r24, 0x37	; 55
 1be:	08 95       	ret
		case 0x20:return '8';
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	08 95       	ret
		case 0x40:return '9';
 1c4:	89 e3       	ldi	r24, 0x39	; 57
 1c6:	08 95       	ret
		case 0x80:return 'C';
 1c8:	83 e4       	ldi	r24, 0x43	; 67
 1ca:	08 95       	ret
		case 0x100:return '4';
 1cc:	84 e3       	ldi	r24, 0x34	; 52
 1ce:	08 95       	ret
		case 0x200:return '5';
 1d0:	85 e3       	ldi	r24, 0x35	; 53
 1d2:	08 95       	ret
		case 0x400:return '6';
 1d4:	86 e3       	ldi	r24, 0x36	; 54
 1d6:	08 95       	ret
		case 0x800:return 'B';
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	08 95       	ret
		case 0x1000:return '1';
 1dc:	81 e3       	ldi	r24, 0x31	; 49
 1de:	08 95       	ret
		case 0x2000:return '2';
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	08 95       	ret
		case 0x4000:return '3';
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	08 95       	ret
		case 0x8000:return 'A';
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	08 95       	ret
	}
	return 0;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
}

char keypad_to_ascii_sim(int x)	// function that makes the number pressed to the ascii value or 0
{
	switch(x){
		case 0x01:return '*';
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
		case 0x2000:return '2';
		case 0x4000:return '3';
		case 0x8000:return 'A';
	}
	return 0;
}
 1f2:	08 95       	ret

000001f4 <main>:


int main(void)
{
	DDRB = 0xFF;	// initialize PB0-7 as output
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	87 bb       	out	0x17, r24	; 23
	DDRC = (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4);	// initialize PC4-7 as output
 1f8:	80 ef       	ldi	r24, 0xF0	; 240
 1fa:	84 bb       	out	0x14, r24	; 20
		}
		else  // if the key is wrong
		{
			for(i=0; i<4; i++)	//repeat 4 times --> ~4sec
			{
				PORTB = 0xFF;	// turn on LEDS
 1fc:	cf ef       	ldi	r28, 0xFF	; 255
	DDRB = 0xFF;	// initialize PB0-7 as output
	DDRC = (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4);	// initialize PC4-7 as output
	
	while(1)
	{
		first_digit = 0;	//initialize first digit with 0
 1fe:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <first_digit>
		second_digit = 0;	//initialize first digit with 0
 202:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <second_digit>
		do{
			num_pressed = scan_keypad_rising_edge_sim();
 206:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge_sim>
 20a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <num_pressed+0x1>
 20e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <num_pressed>
			first_digit = keypad_to_ascii_sim(num_pressed);		// read and store 1st digit
 212:	0e 94 97 00 	call	0x12e	; 0x12e <keypad_to_ascii_sim>
 216:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <first_digit>
		} while(first_digit==0);	//repeat until first digit is valid
 21a:	88 23       	and	r24, r24
 21c:	a1 f3       	breq	.-24     	; 0x206 <main+0x12>
		do{
			num_pressed = scan_keypad_rising_edge_sim();
 21e:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge_sim>
 222:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <num_pressed+0x1>
 226:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <num_pressed>
			second_digit = keypad_to_ascii_sim(num_pressed);	// read and store 2nd digit
 22a:	0e 94 97 00 	call	0x12e	; 0x12e <keypad_to_ascii_sim>
 22e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <second_digit>
		} while(second_digit==0);	//repeat until second digit is valid
 232:	88 23       	and	r24, r24
 234:	a1 f3       	breq	.-24     	; 0x21e <main+0x2a>
		scan_keypad_rising_edge_sim();	// we call that for safety reasons
 236:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge_sim>
		
		
		if((first_digit=='4') && (second_digit)=='1')	// if the key is correct
 23a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <first_digit>
 23e:	84 33       	cpi	r24, 0x34	; 52
 240:	71 f5       	brne	.+92     	; 0x29e <main+0xaa>
 242:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <second_digit>
 246:	81 33       	cpi	r24, 0x31	; 49
 248:	59 f4       	brne	.+22     	; 0x260 <main+0x6c>
		{
			PORTB = 0xFF;	// turn on LEDS in PORTB
 24a:	c8 bb       	out	0x18, r28	; 24
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	87 ea       	ldi	r24, 0xA7	; 167
 250:	91 e6       	ldi	r25, 0x61	; 97
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x5e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x68>
 25c:	00 00       	nop
 25e:	1d c0       	rjmp	.+58     	; 0x29a <main+0xa6>
			_delay_ms(4000);	// for ~4sec
		}
		else  // if the key is wrong
		{
			for(i=0; i<4; i++)	//repeat 4 times --> ~4sec
 260:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
			{
				PORTB = 0xFF;	// turn on LEDS
 264:	c8 bb       	out	0x18, r28	; 24
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	84 e3       	ldi	r24, 0x34	; 52
 26a:	9c e0       	ldi	r25, 0x0C	; 12
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x78>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x82>
 276:	00 00       	nop
				_delay_ms(500);	// for ~ 0.5sec
				PORTB = 0x00;	// turn off LEDS
 278:	18 ba       	out	0x18, r1	; 24
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	84 e3       	ldi	r24, 0x34	; 52
 27e:	9c e0       	ldi	r25, 0x0C	; 12
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x8c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x96>
 28a:	00 00       	nop
			PORTB = 0xFF;	// turn on LEDS in PORTB
			_delay_ms(4000);	// for ~4sec
		}
		else  // if the key is wrong
		{
			for(i=0; i<4; i++)	//repeat 4 times --> ~4sec
 28c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <i>
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <i>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	28 f3       	brcs	.-54     	; 0x264 <main+0x70>
				_delay_ms(500);	// for ~ 0.5sec
				PORTB = 0x00;	// turn off LEDS
				_delay_ms(500);	// for ~ 0.5sec
			}
		}
		PORTB = 0x00;	// turn off leds
 29a:	18 ba       	out	0x18, r1	; 24
	}
 29c:	b0 cf       	rjmp	.-160    	; 0x1fe <main+0xa>
			PORTB = 0xFF;	// turn on LEDS in PORTB
			_delay_ms(4000);	// for ~4sec
		}
		else  // if the key is wrong
		{
			for(i=0; i<4; i++)	//repeat 4 times --> ~4sec
 29e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <i>
 2a2:	e0 cf       	rjmp	.-64     	; 0x264 <main+0x70>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
