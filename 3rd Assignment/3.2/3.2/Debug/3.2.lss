
AVRASM ver. 2.2.7  C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\3η Εργαστηριακή ’σκηση\’σκηση 2\3.2\3.2\main.asm Sat Nov 20 23:21:23 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\3η Εργαστηριακή ’σκηση\’σκηση 2\3.2\3.2\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
C:\Users\n_pey\Desktop\ΗΜΜΥ ΕΜΠ\9ο εξάμηνο\Εργαστήριο Μικροϋπολογιστών\Εργαστηριακές Ασκήσεις\3η Εργαστηριακή ’σκηση\’σκηση 2\3.2\3.2\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m16def.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 #define _M16DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega16
                                 #pragma AVRPART ADMIN PART_NAME ATmega16
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x03
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SE	= 6	; Sleep Enable
                                 .equ	SM2	= 7	; Sleep Mode Select
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special function I/O register
                                 ;.equ	PSR10	= 0	; Prescaler reset
                                 .equ	PSR2	= 1	; Prescaler reset
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1c00
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1bff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x1f80
                                 .equ	SECONDBOOTSTART	= 0x1f00
                                 .equ	THIRDBOOTSTART	= 0x1e00
                                 .equ	FOURTHBOOTSTART	= 0x1c00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 ; 3.2.asm
                                 ;
                                 ; Created: 20/11/2021 10:52:40 ΞΌΞΌ
                                 ; Author : Ξ Ξ΅Ξ³Ξ΅ΞΉΟΟΞ· ΞΞ¬ΟΞ±Ξ»Ξ·
                                 ;
                                 
                                 
                                 .include "m16def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m16def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega16
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega16
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M16DEF_INC_
                                 
                                 #endif  /* _M16DEF_INC_ */
                                 
                                 
                                 .DSEG
000060                           _tmp_: .byte 2
                                 .CSEG
                                 .def dgt1 = r20
                                 .def dgt2 = r21
                                 
000000 e58f                      reset:	ldi r24, low(RAMEND)				; initialize stack pointer
000001 bf8d                      		out SPL, r24
000002 e084                      		ldi r24, high(RAMEND)
000003 bf8e                      		out SPH, r24
                                 
000004 efaf                      		ser r26								
000005 bba7                      		out DDRB, r26						; initialize PORTB for output
000006 bba1                      		out DDRD, r26						; initialize PORTD that is connected to LCD, as output
000007 ef80                      		ldi r24, (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)	; set as output the 4 MSB
000008 bb84                      		out DDRC, r24												; of PORTC
                                 		
                                 
000009 2788                      main:	clr r24
00000a d0c8                      		rcall lcd_init_sim					; initialize with clear screen
00000b d071                      		rcall scan_keypad_rising_edge_sim
00000c d08e                      		rcall keypad_to_ascii_sim			; read 1st digit 
00000d 3080                      		cpi r24, 0							; repeat until 1st digit is valid
00000e f3d1                      		breq main
00000f 2f48                      		mov dgt1,r24							; store 1st digit
000010 d06c                      next:	rcall scan_keypad_rising_edge_sim
000011 d089                      		rcall keypad_to_ascii_sim			; read 2nd digit 
000012 3080                      		cpi r24, 0							; repeat until 2nd digit is valid
000013 f3e1                      		breq next
000014 2f58                      		mov dgt2,r24							; store 2nd digit
000015 d067                      		rcall scan_keypad_rising_edge_sim	; we call that for safety reasons
                                 
000016 3344                      		cpi dgt1, 52		; if 1st digit != 4
000017 f501                      		brne wrong_key
000018 3351                      		cpi dgt2, 49		; or 2nd digit != 1
000019 f4f1                      		brne wrong_key	; wrong_key given, go to wrong_key
                                 
00001a 2788                      correct_key:	clr r24
00001b d0b7                      				rcall lcd_init_sim
00001c e587                      				ldi r24, 'W'
00001d d0fc                      				rcall lcd_data_sim
00001e e485                      				ldi r24, 'E'
00001f d0fa                      				rcall lcd_data_sim
000020 e48c                      				ldi r24, 'L'
000021 d0f8                      				rcall lcd_data_sim
000022 e483                      				ldi r24, 'C'
000023 d0f6                      				rcall lcd_data_sim
000024 e48f                      				ldi r24, 'O'
000025 d0f4                      				rcall lcd_data_sim
000026 e48d                      				ldi r24, 'M'
000027 d0f2                      				rcall lcd_data_sim
000028 e485                      				ldi r24, 'E'
000029 d0f0                      				rcall lcd_data_sim
00002a e280                      				ldi r24, ' '
00002b d0ee                      				rcall lcd_data_sim
00002c e384                      				ldi r24, '4'
00002d d0ec                      				rcall lcd_data_sim
00002e e381                      				ldi r24, '1'
00002f d0ea                      				rcall lcd_data_sim	;display "WELCOME 41"
                                 
000030 ef3f                      				ser r19
000031 bb38                      				out PORTB, r19		; turn on LEDS
000032 ea80                      				ldi r24, low(4000)
000033 e09f                      				ldi r25, high(4000)
000034 d10d                      				rcall wait_msec		; delay 4sec
000035 2733                      				clr r19
000036 bb38                      				out PORTB, r19		; turn off LEDS
000037 cfd1                      				rjmp main
                                 
000038 2788                      wrong_key:	clr r24
000039 d099                      			rcall lcd_init_sim
00003a e481                      			ldi r24, 'A'
00003b d0de                      			rcall lcd_data_sim
00003c e48c                      			ldi r24, 'L'
00003d d0dc                      			rcall lcd_data_sim
00003e e481                      			ldi r24, 'A'
00003f d0da                      			rcall lcd_data_sim
000040 e582                      			ldi r24, 'R'
000041 d0d8                      			rcall lcd_data_sim
000042 e48d                      			ldi r24, 'M'
000043 d0d6                      			rcall lcd_data_sim
000044 e280                      			ldi r24, ' '
000045 d0d4                      			rcall lcd_data_sim
000046 e48f                      			ldi r24, 'O'
000047 d0d2                      			rcall lcd_data_sim
000048 e48e                      			ldi r24, 'N'
000049 d0d0                      			rcall lcd_data_sim	;display "ALARM ON"
                                 		
00004a e024                      		ldi r18, 4			; loop for 4 times
00004b 3020                      loop:	cpi r18, 0
00004c f061                      		breq finish
00004d ef3f                      		ser r19
00004e bb38                      		out PORTB, r19		; turn on LEDS
00004f ef84                      		ldi r24, low(500)
000050 e091                      		ldi r25, high(500)
000051 d0f0                      		rcall wait_msec		; delay 0.5sec
000052 2733                      		clr r19
000053 bb38                      		out PORTB, r19		; turn off LEDS
000054 ef84                      		ldi r24, low(500)
000055 e091                      		ldi r25, high(500)
000056 d0eb                      		rcall wait_msec		; delay 0.5sec
000057 952a                      		dec r18
000058 cff2                      		rjmp loop
                                 
000059 cfaf                      finish:	rjmp main			; return to main
                                 
                                 //given code for functions to be called
                                 scan_row_sim:	
00005a bb95                      	out PORTC, r25		; ? ?????????? ?????? ??????? ??? ?????? β1β
00005b 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
00005c 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
00005d ef84                      	ldi r24,low(500)	; ?????????
00005e e091                      	ldi r25,high(500)
00005f d0ec                      	rcall wait_usec
000060 919f                      	pop r25
000061 918f                      	pop r24				; ????? ????? ??????
000062 0000                      	nop
000063 0000                      	nop					; ??????????? ??? ?? ???????? ?? ????? ? ?????? ??????????
000064 b383                      	in r24, PINC		; ??????????? ?? ?????? (??????) ??? ????????? ??? ????? ?????????
000065 708f                      	andi r24 ,0x0f		; ????????????? ?? 4 LSB ???? ?? β1β ???????? ??? ????? ?????????
000066 9508                      	ret					; ?? ?????????
                                 
                                 
                                 scan_keypad_sim:	
000067 93af                      	push r26			; ?????????? ???? ??????????? r27:r26 ????? ????
000068 93bf                      	push r27			; ????????? ???? ???? ???????
000069 e190                      	ldi r25 , 0x10		; ?????? ??? ????? ?????? ??? ????????????? (PC4: 1 2 3 A)
00006a dfef                      	rcall scan_row_sim
00006b 9582                      	swap r24			; ?????????? ?? ??????????
00006c 2fb8                      	mov r27, r24		; ??? 4 msb ??? r27
00006d e290                      	ldi r25 ,0x20		; ?????? ?? ??????? ?????? ??? ????????????? (PC5: 4 5 6 B)
00006e dfeb                      	rcall scan_row_sim
00006f 0fb8                      	add r27, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r27
000070 e490                      	ldi r25 , 0x40		; ?????? ??? ????? ?????? ??? ????????????? (PC6: 7 8 9 C)
000071 dfe8                      	rcall scan_row_sim
000072 9582                      	swap r24			; ?????????? ?? ??????????
000073 2fa8                      	mov r26, r24		; ??? 4 msb ??? r26
000074 e890                      	ldi r25 ,0x80		; ?????? ??? ??????? ?????? ??? ????????????? (PC7: * 0 # D)
000075 dfe4                      	rcall scan_row_sim
000076 0fa8                      	add r26, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r26
000077 01cd                      	movw r24, r26		; ???????? ?? ?????????? ????? ??????????? r25:r24
000078 27aa                      	clr r26				; ?????????? ??? ??? ????????????? ????????
000079 bba5                      	out PORTC,r26		; ?????????? ??? ??? ????????????? ????????
00007a 91bf                      	pop r27				; ????????? ???? ??????????? r27:r26
00007b 91af                      	pop r26
00007c 9508                      	ret 
                                 
                                 
                                 scan_keypad_rising_edge_sim:
00007d 936f                      	push r22				; ?????????? ???? ??????????? r23:r22 ??? ????
00007e 937f                      	push r23				; r26:r27 ????? ???? ????????? ???? ???? ???????
00007f 93af                      	push r26
000080 93bf                      	push r27	
000081 dfe5                      	rcall scan_keypad_sim	; ?????? ?? ???????????? ??? ?????????? ?????????
000082 938f                      	push r24				; ??? ?????????? ?? ??????????
000083 939f                      	push r25
000084 e08f                      	ldi r24 ,15				; ??????????? 15 ms (??????? ????? 10-20 msec ??? ??????????? ??? ???
000085 e090                      	ldi r25 ,0				; ???????????? ??? ????????????? β ????????????? ????????????)
000086 d0bb                      	rcall wait_msec
000087 dfdf                      	rcall scan_keypad_sim	; ?????? ?? ???????????? ???? ??? ????????	
000088 917f                      	pop r23					; ??? ??????? ?????????? ???????????
000089 916f                      	pop r22
00008a 2386                      	and r24 ,r22
00008b 2397                      	and r25 ,r23
00008c e6a0                      	ldi r26 ,low(_tmp_)		; ??????? ??? ????????? ??? ????????? ????
00008d e0b0                      	ldi r27 ,high(_tmp_)	; ??????????? ????? ??? ???????? ????? r27:r26
00008e 917d                      	ld r23 ,X+
00008f 916c                      	ld r22 ,X	
000090 938c                      	st X ,r24				; ?????????? ??? RAM ?? ??? ?????????
000091 939e                      	st -X ,r25				; ??? ?????????
000092 9570                      	com r23
000093 9560                      	com r22					; ???? ???? ????????? ??? ????? Β«?????Β» ???????
000094 2386                      	and r24 ,r22
000095 2397                      	and r25 ,r23
000096 91bf                      	pop r27					; ????????? ???? ??????????? r27:r26
000097 91af                      	pop r26					; ??? r23:r22
000098 917f                      	pop r23
000099 916f                      	pop r22
00009a 9508                      	ret
                                 
                                 
                                 keypad_to_ascii_sim:
00009b 93af                      	push r26			; ?????????? ???? ??????????? r27:r26 ????? ????
00009c 93bf                      	push r27			; ????????? ???? ??? ???????
00009d 01dc                      	movw r26 ,r24		; ?????? β1β ???? ?????? ??? ?????????? r26 ????????
                                 						; ?? ???????? ??????? ??? ????????
00009e e28a                      	ldi r24 ,'*'		
                                 						; r26
                                 						;C 9 8 7 D # 0 *
00009f fda0                      	sbrc r26 ,0
0000a0 c02f                      	rjmp return_ascii
0000a1 e380                      	ldi r24 ,'0'
0000a2 fda1                      	sbrc r26 ,1
0000a3 c02c                      	rjmp return_ascii
0000a4 e283                      	ldi r24 ,'#'
0000a5 fda2                      	sbrc r26 ,2
0000a6 c029                      	rjmp return_ascii
0000a7 e484                      	ldi r24 ,'D'
0000a8 fda3                      	sbrc r26 ,3			; ?? ??? ????? β1β??????????? ??? ret, ?????? (?? ????? β1β)	
0000a9 c026                      	rjmp return_ascii	; ?????????? ?? ??? ?????????? r24 ??? ASCII ???? ??? D.
0000aa e387                      	ldi r24 ,'7'
0000ab fda4                      	sbrc r26 ,4
0000ac c023                      	rjmp return_ascii
0000ad e388                      	ldi r24 ,'8'
0000ae fda5                      	sbrc r26 ,5
0000af c020                      	rjmp return_ascii
0000b0 e389                      	ldi r24 ,'9'	
0000b1 fda6                      	sbrc r26 ,6
0000b2 c01d                      	rjmp return_ascii ;
0000b3 e483                      	ldi r24 ,'C'
0000b4 fda7                      	sbrc r26 ,7
0000b5 c01a                      	rjmp return_ascii
0000b6 e384                      	ldi r24 ,'4'		; ?????? β1β ???? ?????? ??? ?????????? r27 ????????
0000b7 fdb0                      	sbrc r27 ,0			; ?? ???????? ??????? ??? ????????
0000b8 c017                      	rjmp return_ascii
0000b9 e385                      	ldi r24 ,'5'
                                 						;r27
                                 						;? 3 2 1 B 6 5 4
0000ba fdb1                      	sbrc r27 ,1
0000bb c014                      	rjmp return_ascii
0000bc e386                      	ldi r24 ,'6'
0000bd fdb2                      	sbrc r27 ,2
0000be c011                      	rjmp return_ascii
0000bf e482                      	ldi r24 ,'B'
0000c0 fdb3                      	sbrc r27 ,3
0000c1 c00e                      	rjmp return_ascii
0000c2 e381                      	ldi r24 ,'1'
0000c3 fdb4                      	sbrc r27 ,4
0000c4 c00b                      	rjmp return_ascii ;
0000c5 e382                      	ldi r24 ,'2'
0000c6 fdb5                      	sbrc r27 ,5
0000c7 c008                      	rjmp return_ascii
0000c8 e383                      	ldi r24 ,'3' 
0000c9 fdb6                      	sbrc r27 ,6
0000ca c005                      	rjmp return_ascii
0000cb e481                      	ldi r24 ,'A'
0000cc fdb7                      	sbrc r27 ,7
0000cd c002                      	rjmp return_ascii
0000ce 2788                      	clr r24
0000cf c000                      	rjmp return_ascii
                                 	
                                 return_ascii:
0000d0 91bf                      	pop r27				; ????????? ???? ??????????? r27:r26
0000d1 91af                      	pop r26
0000d2 9508                      	ret 
                                 	
                                 
                                 lcd_init_sim:
0000d3 938f                      	push r24				; ?????????? ???? ??????????? r25:r24 ????? ????
0000d4 939f                      	push r25				; ????????? ???? ??? ???????
                                 	
0000d5 e288                      	ldi r24, 40				; ???? ? ???????? ??? lcd ????????????? ??
0000d6 e090                      	ldi r25, 0				; ????? ??????? ??? ???? ??? ????????????.
0000d7 d06a                      	rcall wait_msec			; ??????? 40 msec ????? ???? ?? ???????????.
0000d8 e380                      	ldi r24, 0x30			; ?????? ????????? ?? 8 bit mode
0000d9 bb82                      	out PORTD, r24			; ?????? ??? ???????? ?? ??????? ???????
0000da 9a93                      	sbi PORTD, PD3			; ??? ?? ?????????? ??????? ??? ???????
0000db 9893                      	cbi PORTD, PD3			; ??? ??????, ? ?????? ???????????? ??? ?????
0000dc e287                      	ldi r24, 39
0000dd e090                      	ldi r25, 0				; ??? ? ???????? ??? ?????? ????????? ?? 8-bit mode
0000de d06d                      	rcall wait_usec			; ??? ?? ?????? ??????, ???? ?? ? ???????? ???? ??????????
                                 							; ??????? 4 bit ?? ??????? ?? ?????????? 8 bit
0000df 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
0000e0 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
0000e1 ee88                      	ldi r24,low(1000)		; ?????????
0000e2 e093                      	ldi r25,high(1000)
0000e3 d068                      	rcall wait_usec
0000e4 919f                      	pop r25
0000e5 918f                      	pop r24					; ????? ????? ??????
0000e6 e380                      	ldi r24, 0x30
0000e7 bb82                      	out PORTD, r24
0000e8 9a93                      	sbi PORTD, PD3
0000e9 9893                      	cbi PORTD, PD3
0000ea e287                      	ldi r24,39
0000eb e090                      	ldi r25,0
0000ec d05f                      	rcall wait_usec 
0000ed 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
0000ee 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
0000ef ee88                      	ldi r24 ,low(1000)		; ?????????
0000f0 e093                      	ldi r25 ,high(1000)
0000f1 d05a                      	rcall wait_usec
0000f2 919f                      	pop r25
0000f3 918f                      	pop r24					; ????? ????? ??????
0000f4 e280                      	ldi r24,0x20			; ?????? ?? 4-bit mode
0000f5 bb82                      	out PORTD, r24
0000f6 9a93                      	sbi PORTD, PD3
0000f7 9893                      	cbi PORTD, PD3
0000f8 e287                      	ldi r24,39
0000f9 e090                      	ldi r25,0
0000fa d051                      	rcall wait_usec
0000fb 938f                      	push r24				; ????? ?????? ??? ??????????? ??? ?? ?????
0000fc 939f                      	push r25				; ?????????? ??? ???????????? ??????????????
0000fd ee88                      	ldi r24 ,low(1000)		; ?????????
0000fe e093                      	ldi r25 ,high(1000)	
0000ff d04c                      	rcall wait_usec
000100 919f                      	pop r25
000101 918f                      	pop r24					; ????? ????? ??????
000102 e288                      	ldi r24,0x28			; ??????? ?????????? ???????? 5x8 ????????
000103 d00c                      	rcall lcd_command_sim	; ??? ???????? ??? ??????? ???? ?????
000104 e08c                      	ldi r24,0x0c			; ???????????? ??? ??????, ???????? ??? ???????
000105 d00a                      	rcall lcd_command_sim
000106 e081                      	ldi r24,0x01			; ?????????? ??? ??????
000107 d008                      	rcall lcd_command_sim
000108 ef8a                      	ldi r24, low(1530)
000109 e095                      	ldi r25, high(1530)
00010a d041                      	rcall wait_usec
00010b e086                      	ldi r24 ,0x06			; ???????????? ????????? ??????? ???? 1 ??? ??????????
00010c d003                      	rcall lcd_command_sim	; ??? ????? ???????????? ???? ??????? ??????????? ???
                                 							; ?????????????? ??? ????????? ????????? ??? ??????
00010d 919f                      	pop r25					; ????????? ???? ??????????? r25:r24
00010e 918f                      	pop r24
00010f 9508                      	ret
                                 	
                                 
                                 lcd_command_sim:
000110 938f                      	push r24					; ?????????? ???? ??????????? r25:r24 ????? ????
000111 939f                      	push r25					; ????????? ???? ??? ???????
000112 9892                      	cbi PORTD, PD2				; ??????? ??? ?????????? ??????? (PD2=0)
000113 d010                      	rcall write_2_nibbles_sim	; ???????? ??? ??????? ??? ??????? 39?sec
000114 e287                      	ldi r24, 39					; ??? ??? ?????????? ??? ????????? ??? ??? ??? ??????? ??? lcd.
000115 e090                      	ldi r25, 0					; ???.: ???????? ??? ???????, ?? clear display ??? return home,
000116 d035                      	rcall wait_usec				; ??? ???????? ????????? ?????????? ??????? ????????.	
000117 919f                      	pop r25						; ????????? ???? ??????????? r25:r24
000118 918f                      	pop r24
000119 9508                      	ret 
                                 	
                                 
                                 lcd_data_sim:
00011a 938f                      	push r24					; ?????????? ???? ??????????? r25:r24 ????? ????
00011b 939f                      	push r25					; ????????? ???? ??? ???????
00011c 9a92                      	sbi PORTD, PD2				; ??????? ??? ?????????? ????????? (PD2=1)
00011d d006                      	rcall write_2_nibbles_sim	; ???????? ??? byte
00011e e28b                      	ldi r24 ,43					; ??????? 43?sec ????? ?? ??????????? ? ????
00011f e090                      	ldi r25 ,0					; ??? ????????? ??? ??? ??????? ??? lcd
000120 d02b                      	rcall wait_usec
000121 919f                      	pop r25						;????????? ???? ??????????? r25:r24
000122 918f                      	pop r24
000123 9508                      	ret
                                 	
                                 
                                 write_2_nibbles_sim:
000124 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
000125 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
000126 e780                      	ldi r24 ,low(6000)	; ?????????
000127 e197                      	ldi r25 ,high(6000)
000128 d023                      	rcall wait_usec
000129 919f                      	pop r25
00012a 918f                      	pop r24				; ????? ????? ??????
00012b 938f                      	push r24			; ??????? ?? 4 MSB
00012c b390                      	in r25, PIND		; ??????????? ?? 4 LSB ??? ?? ?????????????	
00012d 709f                      	andi r25, 0x0f		; ??? ?? ??? ????????? ??? ????? ??????????? ?????????
00012e 7f80                      	andi r24, 0xf0		; ????????????? ?? 4 MSB ???
00012f 0f89                      	add r24, r25		; ???????????? ?? ?? ???????????? 4 LSB
000130 bb82                      	out PORTD, r24		; ??? ???????? ???? ?????
000131 9a93                      	sbi PORTD, PD3		; ????????????? ?????? Enable ???? ????????? PD3
000132 9893                      	cbi PORTD, PD3		; PD3=1 ??? ???? PD3=0
000133 938f                      	push r24			; ????? ?????? ??? ??????????? ??? ?? ?????
000134 939f                      	push r25			; ?????????? ??? ???????????? ??????????????
000135 e780                      	ldi r24 ,low(6000)	; ?????????
000136 e197                      	ldi r25 ,high(6000)
000137 d014                      	rcall wait_usec
000138 919f                      	pop r25
000139 918f                      	pop r24				; ????? ????? ??????
00013a 918f                      	pop r24				; ??????? ?? 4 LSB. ????????? ?? byte.
00013b 9582                      	swap r24			; ????????????? ?? 4 MSB ?? ?? 4 LSB
00013c 7f80                      	andi r24 ,0xf0		; ??? ?? ??? ????? ???? ?????????????
00013d 0f89                      	add r24, r25
00013e bb82                      	out PORTD, r24
00013f 9a93                      	sbi PORTD, PD3		; ???? ?????? Enable
000140 9893                      	cbi PORTD, PD3
000141 9508                      	ret
                                 
                                 
                                 wait_msec:
000142 938f                      	push r24			; 2 ?????? (0.250 ?sec)
000143 939f                      	push r25			; 2 ??????
000144 ee86                      	ldi r24 , low(998)	; ??????? ??? ?????. r25:r24 ?? 998 (1 ?????? - 0.125 ?sec)
000145 e093                      	ldi r25 , high(998) ; 1 ?????? (0.125 ?sec)
000146 d005                      	rcall wait_usec		; 3 ?????? (0.375 ?sec), ???????? ???????? ??????????? 998.375 ?sec
000147 919f                      	pop r25				; 2 ?????? (0.250 ?sec)
000148 918f                      	pop r24				; 2 ??????
000149 9701                      	sbiw r24 , 1		; 2 ??????
00014a f7b9                      	brne wait_msec		; 1 ? 2 ?????? (0.125 ? 0.250 ?sec)
00014b 9508                      	ret					; 4 ?????? (0.500 ?sec)
                                 
                                 wait_usec:
00014c 9701                      	sbiw r24 ,1		; 2 ?????? (0.250 ?sec)
00014d 0000                      	nop				; 1 ?????? (0.125 ?sec)
00014e 0000                      	nop				; 1 ?????? (0.125 ?sec)
00014f 0000                      	nop				; 1 ?????? (0.125 ?sec)
000150 0000                      	nop				; 1 ?????? (0.125 ?sec)
000151 f7d1                      	brne wait_usec	; 1 ? 2 ?????? (0.125 ? 0.250 ?sec)


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
x  :   4 y  :   0 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   0 r17:   0 r18:   3 r19:   8 r20:   2 
r21:   2 r22:   7 r23:   7 r24: 121 r25:  51 r26:  24 r27:  17 r28:   0 
r29:   0 r30:   0 r31:   0 
Registers used: 11 out of 35 (31.4%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   4 adiw  :   0 and   :   4 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   7 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   0 cpc   :   0 
cpi   :   5 cpse  :   0 dec   :   1 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   0 jmp   :   0 
ld    :   2 ldd   :   0 ldi   :  87 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   4 movw  :   2 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   0 ori   :   0 out   :  16 pop   :  31 
push  :  31 rcall :  56 ret   :  10 reti  :   0 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :  16 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   3 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 28 out of 113 (24.8%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002a6    678      0    678   16384   4.1%
[.dseg] 0x000060 0x000062      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
